namespace SqlServerToPostgreSql.Models;

public class SqlServerTableColumn
{
	public string Name { get; set; } = "";

	public string? Default { get; set; }

	public bool IsNullable { get; set; }

	public string DataType { get; set; } = "";

	public int? MaxLength { get; set; }

	public int? NumericPrecision { get; set; }

	public int? NumericScale { get; set; }

	public bool IsIdentity { get; set; }

	public int? IdentitySeed { get; set; }

	public int? IdentityIncrement { get; set; }

	public string ToSql()
	{
		var name = $@"""{Name}""";
		var dataType = GetPostgreSqlDataType();
		var identity = GetPostgreSqlIdentity();
		var notNull = IsNullable ? "" : "not null";

		return string.Join(" ", new[]
		{
			name,
			dataType,
			identity,
			notNull
		}.Where(x => !string.IsNullOrEmpty(x)));
	}

	private string GetPostgreSqlDataType()
	{
		var dataType = DataType.ToLower();
		var maxLength = MaxLength;

		if (new[] { "nvarchar", "varchar", "nchar", "char", "text" }.Contains(dataType))
		{
			if (dataType == "text" || maxLength == -1 || MaxLength > 8000)
			{
				dataType = "text";
				maxLength = null;
			}
			else if (dataType.StartsWith("n"))
				dataType = dataType[1..];
		}

		var p = GetLimit() + GetDefault();

		switch (dataType)
		{
			case "bit": return "bool" + p;
			case "datetime":
			case "datetime2": return "timestamp" + p;
			case "integer": return "int" + p;
			case "tinyint": return "smallint" + p;
			case "uniqueidentifier": return "uuid" + p;
			default: return dataType + p;
		}

		string GetLimit()
		{
			if (dataType == "decimal") return $"({NumericPrecision ?? 0}, {NumericScale ?? 0})";
			return !maxLength.HasValue ? "" : $"({maxLength})";
		}

		string GetDefault()
		{
			if (string.IsNullOrEmpty(Default)) return "";

			var result = Default;
			if (dataType == "bit")
			{
				if (result == "((1))") result = "true";
				else if (result == "((0))") result = "false";
			}

			result = result.Replace("getutcdate()", "now() at time zone 'utc'");
			result = result.Replace("newid()", "gen_random_uuid()");

			return " default " + result;
		}
	}

	private string GetPostgreSqlIdentity()
	{
		if (!IsIdentity || !IdentitySeed.HasValue || !IdentityIncrement.HasValue)
			return "";

		return $"generated by default as identity (start with {IdentitySeed} increment by {IdentityIncrement})";
	}
}
